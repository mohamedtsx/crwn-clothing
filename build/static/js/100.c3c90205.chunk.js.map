{"version":3,"file":"static/js/100.c3c90205.chunk.js","mappings":"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","sources":["components/button/button.component.tsx","components/button/button.style.tsx","components/form-input/form-input.style.tsx","components/form-input/form-input.component.tsx","components/sign-in-form/sign-in-form.component.tsx","components/sign-up-form/sign-up-form.component.tsx","routes/authentication/authentication.component.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"sourcesContent":["import {  FC, ButtonHTMLAttributes} from 'react';\nimport { BaseBtn, GoogleSignInBtn, InvertedBtn } from './button.style';\n\n\nexport enum BUTTON_TYPE_CLASSES {\n    google = 'google-sign-in',\n    inverted = 'inverted',\n    base = 'base'\n}\n\nexport type ButtonProps = {\n    buttonType?: BUTTON_TYPE_CLASSES;\n    isLoading?: boolean;\n} & ButtonHTMLAttributes<HTMLButtonElement>;\n\n\nconst getButton = (buttonType = BUTTON_TYPE_CLASSES.base): typeof BaseBtn => \n    ({\n        [BUTTON_TYPE_CLASSES.base]: BaseBtn,\n        [BUTTON_TYPE_CLASSES.google]: GoogleSignInBtn,\n        [BUTTON_TYPE_CLASSES.inverted]: InvertedBtn,\n    }[buttonType]);\n\n\n\nconst Button: FC<ButtonProps> = ({\n    buttonType, \n    children, \n    isLoading, \n    ...otherProps\n}) => {\n    const CustomButton = getButton(buttonType);\n    return (\n        <CustomButton {...otherProps}>\n            {isLoading ? '...' : children}\n        </CustomButton>\n    )\n}\n\nexport default Button;","import styled from 'styled-components';\n\nexport const BaseBtn = styled.button`\n  min-width: 16.5rem;\n  width: auto;\n  height: 5rem;\n  line-height: 5rem;\n  padding: 0 3.5rem 0 3.5rem;\n  font-size: 1.5rem;\n  overflow: hidden;\n  background-color: black;\n  color: white;\n  text-transform: uppercase;\n  font-family: 'Open Sans Condensed';\n  font-weight: bolder;\n  border: none;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n \n  &:hover {\n    background-color: #fff;\n    color: black;\n    border: 1px solid black;\n  }\n\n  &:active {\n    box-shadow: 0 0 4px rgba(255, 255, 255, 0.5);\n  }\n`\n\nexport const GoogleSignInBtn = styled(BaseBtn)`\n  background-color: #4285f4;\n  color: white;\n\n  &:hover {\n    background-color: #357ae8;\n    color: #fff;\n    border: none;\n  }\n`\n\nexport const InvertedBtn = styled(BaseBtn)`\n  background-color: white;\n  color: black;\n  border: 1px solid black;\n\n  &:hover {\n    background-color: black;\n    color: white;\n  }\n`","import styled, { css } from 'styled-components';\n\nconst subColor = 'grey';\nconst mainColor = 'black';\n\nconst shrinkLabelStyle = css`\n    top: -1.4rem;\n    font-size: 1.2rem;\n    color: ${mainColor};\n`\n\nexport const Group = styled.div`\n    position: relative;\n    margin: 4.5rem 0;\n\n    input[type='password'] {\n        letter-spacing: 0.3rem;\n    }\n`\ntype FormInputLabelProps = {\n    shrink?: boolean\n}\n\nexport const FormInputLabel = styled.label`\n    color: ${subColor};\n    font-size: 1.6rem;\n    font-weight: normal;\n    position: absolute;\n    pointer-events: none;\n    left: 0.5rem;\n    top: 1rem;\n    transition: 300ms ease all;\n\n    ${({shrink}: FormInputLabelProps) => shrink && shrinkLabelStyle};\n`\n\n\nexport const FormIn = styled.input`\n    background: none;\n    background-color: white;\n    color: ${subColor};\n    font-size: 1.8rem;\n    padding: 1rem 1rem 1rem 0.5rem;\n    display: block;\n    width: 100%;\n    border: none;\n    border-radius: 0;\n    border-bottom: 1px solid ${subColor};\n    margin: 2.5rem 0;\n\n    &:focus {\n        outline: none;\n    }\n\n    &:focus ~ ${FormInputLabel} {\n        ${shrinkLabelStyle}\n    }\n`\n","import { InputHTMLAttributes, FC } from 'react';\n\nimport { Group, FormIn, FormInputLabel } from './form-input.style';\n\n\ntype FormInputProps = {\n    labelText: string\n} & InputHTMLAttributes<HTMLInputElement>\n\nconst FormInput: FC<FormInputProps> = ({labelText, ...otherProps}) => {\n    // for check if there are no value prop or there are but empty string\n\n    const labelValue = Boolean(\n        otherProps.value && \n        typeof otherProps.value==='string' &&\n        otherProps.value.length\n    );\n\n    return(\n        <Group>\n            <FormIn {...otherProps}/>\n            <FormInputLabel shrink={labelValue}>{labelText}</FormInputLabel>\n        </Group>\n    )\n}\n\nexport default FormInput;","import { useState, FormEvent, ChangeEvent } from 'react';\n\nimport './sign-in-form.style.scss'\nimport Button, { BUTTON_TYPE_CLASSES } from '../button/button.component';\nimport FormInput from '../form-input/form-input.component';\n\nimport { emailSignInStart, googleSignInStart } from '../../store/user/user.actions';\nimport { useDispatch } from 'react-redux';\n\n\n\nconst defaultFormFields = {\n    email: '',\n    password: ''\n}\n\nconst SignIn = () => {\n    const [formFields, setFormFields] = useState(defaultFormFields);\n    const {email, password} = formFields;\n    const dispatch = useDispatch()\n\n    const handelChange = (e: ChangeEvent<HTMLInputElement>) => {\n        const {name, value} = e.target;\n        setFormFields({...formFields, [name]: value})\n    }\n\n    const handelSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        \n        try {\n            dispatch(emailSignInStart(email,password));\n            resetFormFields();\n        } catch(error) {\n            console.log('user sign in failed', error);\n        }\n    }\n\n    const resetFormFields = () => {\n        setFormFields(defaultFormFields);\n    }\n\n    const googleSignIn = () => {\n        dispatch(googleSignInStart());\n    }\n\n\n    return(\n        <div className='sign-up-container'>\n            <h2>Already have an account ?</h2>\n            <span>Sign in with your email and password</span>\n            <form onSubmit={handelSubmit}>\n                <FormInput labelText='email' type='email' name='email' value={email} onChange={handelChange}/>\n                <FormInput labelText='password' type='password' name='password' value={password} onChange={handelChange}/>\n                <div className='buttons-container'>\n                    <Button type='submit'>Sign in</Button>\n                    <Button buttonType={BUTTON_TYPE_CLASSES.google} type='button' onClick={googleSignIn}>Google sign in</Button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default SignIn;","import './sign-up-form.style.scss';\nimport { useState, FormEvent, ChangeEvent } from 'react';\nimport { AuthError, AuthErrorCodes } from 'firebase/auth';\n\nimport FormInput from '../form-input/form-input.component';\nimport Button from '../button/button.component';\nimport { signUpStart } from '../../store/user/user.actions';\nimport { useDispatch } from 'react-redux';\n\n\nconst defaultFormFields = {\n    name: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n}\n\nconst SignUp = () => {\n    \n    const [formFields, setFormFields] = useState(defaultFormFields);\n    const {name, email, password, confirmPassword} = formFields;\n    const dispatch = useDispatch();\n\n    const resetFormFields = () => {\n        setFormFields(defaultFormFields);\n    }\n\n\n    const handelSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n\n        if (password !== confirmPassword) {\n            alert('both password not the same');\n            return;\n        };\n\n        try {\n            dispatch(signUpStart(email,password,name));\n            resetFormFields();\n        } catch(error) {\n            if((error as AuthError).code === AuthErrorCodes.EMAIL_EXISTS) {\n                alert('Cannot create user, email already in use');\n            } else {\n                console.log('Sign Up Failed', error);\n            }\n        }\n    }\n\n    const handelChange = (e: ChangeEvent<HTMLInputElement>) => {\n        const {name, value} = e.target;\n        setFormFields({...formFields, [name]: value});\n    }\n\n    \n    return(\n        <div className='sign-up-container'>\n            <h2>Don't have an account ?</h2>\n            <span>Sign up with your email and password</span>\n            <form onSubmit={handelSubmit}>\n                <FormInput labelText='name' type='text' name='name' value={name} onChange={handelChange}/>\n                <FormInput labelText='email' type='email' name='email' value={email} onChange={handelChange}/>\n                <FormInput labelText='password' type='password' name='password' value={password} onChange={handelChange}/>\n                <FormInput labelText='confirm password' type='password' name='confirmPassword' value={confirmPassword} onChange={handelChange}/>\n                <Button type='submit'>Sign up</Button>\n            </form>\n        </div>\n    )\n}\n\nexport default SignUp;","import './authentication.style.scss';\nimport SignIn from '../../components/sign-in-form/sign-in-form.component';\nimport SignUp from '../../components/sign-up-form/sign-up-form.component';\n\nconst Authentication = () => {\n\n    return(\n        <div className='authentication-container'>\n            <SignIn/>\n            <SignUp/>\n        </div>\n    )\n}\n\nexport default Authentication;","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}"],"names":["BUTTON_TYPE_CLASSES","BaseBtn","styled","GoogleSignInBtn","InvertedBtn","buttonType","children","isLoading","otherProps","CustomButton","base","google","inverted","getButton","subColor","shrinkLabelStyle","css","Group","FormInputLabel","shrink","FormIn","labelText","labelValue","Boolean","value","length","defaultFormFields","email","password","useState","formFields","setFormFields","dispatch","useDispatch","handelChange","e","target","name","resetFormFields","className","onSubmit","preventDefault","emailSignInStart","error","console","log","type","onChange","onClick","googleSignInStart","confirmPassword","signUpStart","code","AuthErrorCodes","alert","_objectWithoutProperties","source","excluded","key","i","Object","getOwnPropertySymbols","sourceSymbolKeys","indexOf","prototype","propertyIsEnumerable","call"],"sourceRoot":""}